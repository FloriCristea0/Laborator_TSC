# 1
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 08:46:47 on Apr 15,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Note: ../lab01_testbench-interface/instr_register_test.sv(192): (vlog-13177) Promoting concatenation '{opcode,operand_a,operand_b,...}' to an assignment pattern:  Unsized literal found.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 08:46:47 on Apr 15,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST=case6 -GWR_ORDER=1 -GWR_NR=50 -GRD_ORDER=1 -GRD_NR=50 -GSEED_VAL=2353308 
# Start time: 08:46:47 on Apr 15,2024
# //  ModelSim Microsemi 10.5c Jul 21 2016
# //
# //  Copyright 1991-2016 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim Microsemi and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU DON'T***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 26: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 1
# 
# Writing to register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 2
# 
# Writing to register location 26: 
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 10
# 
# Writing to register location 31: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 8
# 
# Writing to register location 20: 
#   opcode = 7 (MOD)
#   operand_a = 8
#   operand_b = 10
# 
# Writing to register location 25: 
#   opcode = 4 (SUB)
#   operand_a = -6
#   operand_b = 15
# 
# Writing to register location 30: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 4
# 
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = -12
#   operand_b = 9
# 
# Writing to register location 22: 
#   opcode = 2 (PASSB)
#   operand_a = 9
#   operand_b = 14
# 
# Writing to register location 16: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 2
# 
# Writing to register location 21: 
#   opcode = 0 (ZERO)
#   operand_a = 2
#   operand_b = 6
# 
# Writing to register location 18: 
#   opcode = 5 (MULT)
#   operand_a = 6
#   operand_b = 0
# 
# Writing to register location 27: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 5
# 
# Writing to register location 23: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
# Writing to register location 11: 
#   opcode = 7 (MOD)
#   operand_a = -14
#   operand_b = 11
# 
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = -5
#   operand_b = 7
# 
# Writing to register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 11
# 
# Writing to register location 27: 
#   opcode = 6 (DIV)
#   operand_a = 11
#   operand_b = 4
# 
# Writing to register location 5: 
#   opcode = 3 (ADD)
#   operand_a = -12
#   operand_b = 6
# 
# Writing to register location 31: 
#   opcode = 5 (MULT)
#   operand_a = -10
#   operand_b = 11
# 
# Writing to register location 13: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 5
# 
# Writing to register location 15: 
#   opcode = 5 (MULT)
#   operand_a = 5
#   operand_b = 15
# 
# Writing to register location 1: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 13
# 
# Writing to register location 12: 
#   opcode = 1 (PASSA)
#   operand_a = -3
#   operand_b = 15
# 
# Writing to register location 18: 
#   opcode = 4 (SUB)
#   operand_a = -1
#   operand_b = 1
# 
# Writing to register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 12
# 
# Writing to register location 7: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 2
# 
# Writing to register location 13: 
#   opcode = 7 (MOD)
#   operand_a = -14
#   operand_b = 9
# 
# Writing to register location 5: 
#   opcode = 5 (MULT)
#   operand_a = -7
#   operand_b = 7
# 
# Writing to register location 12: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 13
# 
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 5
# 
# Writing to register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = -11
#   operand_b = 12
# 
# Writing to register location 24: 
#   opcode = 5 (MULT)
#   operand_a = 12
#   operand_b = 2
# 
# Writing to register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 13
# 
# Writing to register location 30: 
#   opcode = 7 (MOD)
#   operand_a = 13
#   operand_b = 8
# 
# Writing to register location 3: 
#   opcode = 6 (DIV)
#   operand_a = -8
#   operand_b = 15
# 
# Writing to register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -1
#   operand_b = 14
# 
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = 14
#   operand_b = 3
# 
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 11
# 
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
# Writing to register location 20: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 12
# 
# Writing to register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 12
#   operand_b = 2
# 
# Writing to register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
# Writing to register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 14
# 
# Writing to register location 4: 
#   opcode = 5 (MULT)
#   operand_a = 14
#   operand_b = 8
# 
# Writing to register location 20: 
#   opcode = 4 (SUB)
#   operand_a = -8
#   operand_b = 13
# 
# Writing to register location 27: 
#   opcode = 4 (SUB)
#   operand_a = -3
#   operand_b = 4
# 
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = 4
#   operand_b = 4
# 
# Writing to register location 29: 
#   opcode = 4 (SUB)
#   operand_a = -12
#   operand_b = 11
# 
# Writing to register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 11
#   operand_b = 4
# 
# 
# Reading back the same register locations written...
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 14
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: x
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 6
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: x
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 6
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: x
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 6
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: x
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 0
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: x
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 0
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: x
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 1: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 13
# 
#   result = -1
# 
# 
# Check Result:
#   read_pointer = 1
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 13
# 
# Calculated Test Result: -1
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 0
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: -1
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 12
# 
#   result = 12
# 
# 
# Check Result:
#   read_pointer = 9
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 12
# 
# Calculated Test Result: 12
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 12
#   operand_b = 2
# 
#   result = 10
# 
# 
# Check Result:
#   read_pointer = 30
#   opcode = 4 (SUB)
#   operand_a = 12
#   operand_b = 2
# 
# Calculated Test Result: 10
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 23: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
#   result = -9
# 
# 
# Check Result:
#   read_pointer = 23
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
# Calculated Test Result: -9
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 11
#   operand_b = 4
# 
#   result = 44
# 
# 
# Check Result:
#   read_pointer = 10
#   opcode = 5 (MULT)
#   operand_a = 11
#   operand_b = 4
# 
# Calculated Test Result: 44
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 14
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 44
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 19
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 44
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 14
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 44
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 0
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 44
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 6
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 44
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 13
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 31
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 13
# 
# Calculated Test Result: 0
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
#   result = -3
# 
# 
# Check Result:
#   read_pointer = 24
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
# Calculated Test Result: -3
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 23: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
#   result = -9
# 
# 
# Check Result:
#   read_pointer = 23
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
# Calculated Test Result: -9
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 1: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 13
# 
#   result = -1
# 
# 
# Check Result:
#   read_pointer = 1
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 13
# 
# Calculated Test Result: -1
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
#   result = -3
# 
# 
# Check Result:
#   read_pointer = 24
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
# Calculated Test Result: -3
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 12
#   operand_b = 2
# 
#   result = 10
# 
# 
# Check Result:
#   read_pointer = 30
#   opcode = 4 (SUB)
#   operand_a = 12
#   operand_b = 2
# 
# Calculated Test Result: 10
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 0
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 10
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 11
# 
#   result = -4
# 
# 
# Check Result:
#   read_pointer = 22
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 11
# 
# Calculated Test Result: -4
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
#   result = -3
# 
# 
# Check Result:
#   read_pointer = 24
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
# Calculated Test Result: -3
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 16: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 2
# 
#   result = 7
# 
# 
# Check Result:
#   read_pointer = 16
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 2
# 
# Calculated Test Result: 7
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
#   result = -2
# 
# 
# Check Result:
#   read_pointer = 2
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
# Calculated Test Result: -2
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
#   result = -2
# 
# 
# Check Result:
#   read_pointer = 2
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
# Calculated Test Result: -2
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 12
# 
#   result = 12
# 
# 
# Check Result:
#   read_pointer = 9
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 12
# 
# Calculated Test Result: 12
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
#   result = -2
# 
# 
# Check Result:
#   read_pointer = 2
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
# Calculated Test Result: -2
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 11
# 
#   result = -4
# 
# 
# Check Result:
#   read_pointer = 22
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 11
# 
# Calculated Test Result: -4
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 4: 
#   opcode = 3 (ADD)
#   operand_a = 4
#   operand_b = 4
# 
#   result = 8
# 
# 
# Check Result:
#   read_pointer = 4
#   opcode = 3 (ADD)
#   operand_a = 4
#   operand_b = 4
# 
# Calculated Test Result: 8
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 1: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 13
# 
#   result = -1
# 
# 
# Check Result:
#   read_pointer = 1
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 13
# 
# Calculated Test Result: -1
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 5: 
#   opcode = 5 (MULT)
#   operand_a = -7
#   operand_b = 7
# 
#   result = -49
# 
# 
# Check Result:
#   read_pointer = 5
#   opcode = 5 (MULT)
#   operand_a = -7
#   operand_b = 7
# 
# Calculated Test Result: -49
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
#   result = -2
# 
# 
# Check Result:
#   read_pointer = 2
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 13
# 
# Calculated Test Result: -2
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 21: 
#   opcode = 0 (ZERO)
#   operand_a = 2
#   operand_b = 6
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 21
#   opcode = 0 (ZERO)
#   operand_a = 2
#   operand_b = 6
# 
# Calculated Test Result: 0
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 14
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 13
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 14
# 
# Calculated Test Result: 0
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 14
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 0
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are matching!
# 
# TEST FAIL
# 
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 14
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 13
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 14
# 
# Calculated Test Result: 0
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 19
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 0
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are matching!
# 
# TEST FAIL
# 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 0
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 0
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
#   result = -3
# 
# 
# Check Result:
#   read_pointer = 24
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 4
# 
# Calculated Test Result: -3
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 7: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 2
# 
#   result = 12
# 
# 
# Check Result:
#   read_pointer = 7
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 2
# 
# Calculated Test Result: 12
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 17
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
# Calculated Test Result: 12
# 
# Opcode are not matching!
# 
# Operand_a are not matching!
# 
# Operand_b are not matching!
# 
# Results are not matching!
# 
# TEST FAIL
# 
# Read from register location 23: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
#   result = -9
# 
# 
# Check Result:
#   read_pointer = 23
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
# Calculated Test Result: -9
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 13
# 
#   result = 0
# 
# 
# Check Result:
#   read_pointer = 31
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 13
# 
# Calculated Test Result: 0
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 15: 
#   opcode = 5 (MULT)
#   operand_a = 5
#   operand_b = 15
# 
#   result = 75
# 
# 
# Check Result:
#   read_pointer = 15
#   opcode = 5 (MULT)
#   operand_a = 5
#   operand_b = 15
# 
# Calculated Test Result: 75
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 11
#   operand_b = 4
# 
#   result = 44
# 
# 
# Check Result:
#   read_pointer = 10
#   opcode = 5 (MULT)
#   operand_a = 11
#   operand_b = 4
# 
# Calculated Test Result: 44
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Read from register location 23: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
#   result = -9
# 
# 
# Check Result:
#   read_pointer = 23
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 2
# 
# Calculated Test Result: -9
# 
# Opcode are matching!
# 
# Operand_a are matching!
# 
# Operand_b are matching!
# 
# Results are matching!
# 
# TEST PASS
# 
# Total number of tests: 50
# Number of failed tests: 16
# Number of passed tests: 34
# Pass percentage: 68.00%
# Fail percentage: 32.00%
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU DON'T***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(90)
#    Time: 1046 ns  Iteration: 1  Instance: /top/test
# End time: 08:46:48 on Apr 15,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
